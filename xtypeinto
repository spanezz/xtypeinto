#!/usr/bin/python3

import argparse
import logging
import sys
import xdo
import Xlib
import Xlib.display
import Xlib.Xcursorfont
from Xlib import X

log = logging.getLogger("xtypeinfo")


class Fail(Exception):
    pass


class XTypeInto:
    def __init__(self):
        self.display = Xlib.display.Display()
        self.screen_info = self.display.screen()
        self.root_window = self.screen_info["root"]
        self.xdo = xdo.xdo()

    def pick_window(self):
        """
        Show a crosshair cursor to pick a window.

        :returns: an Xlib Window object
        """
        # Taken from wmctrl:

        font = self.display.open_font('cursor')
        cursor = font.create_glyph_cursor(
                font,
                Xlib.Xcursorfont.crosshair,
                Xlib.Xcursorfont.crosshair + 1,
                (65535, 65535, 65535),
                (0, 0, 0))

        self.root_window.grab_pointer(
                owner_events=False,
                event_mask=X.ButtonPressMask | X.ButtonReleaseMask,
                pointer_mode=X.GrabModeSync,
                keyboard_mode=X.GrabModeAsync,
                confine_to=self.root_window,
                cursor=cursor,
                time=X.CurrentTime)

        try:
            target_win = None
            buttons = 0

            # Let the user select a window
            while target_win is None or buttons != 0:
                # allow one more event
                self.display.allow_events(X.SyncPointer, X.CurrentTime)
                evt = self.display.next_event()
                if evt.type == X.ButtonPress:
                    target_win = evt.child.query_pointer().child
                    buttons += 1
                elif evt.type == X.ButtonRelease:
                    if buttons > 0:  # there may have been some down before we started
                        buttons -= 1

        finally:
            self.display.ungrab_pointer(X.CurrentTime)

        return target_win

    def type(self, win, text):
        # Taken from impass
        self.xdo.focus_window(win)
        self.xdo.wait_for_window_focus(win)
        self.xdo.type(text)


def main():
    parser = argparse.ArgumentParser(description="Type text into a window")
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("string", nargs="?", action="store", help="string to type (default: stdin)")

    args = parser.parse_args()

    log_format = "%(levelname)s %(message)s"
    level = logging.WARN
    if args.debug:
        level = logging.DEBUG
    elif args.verbose:
        level = logging.INFO
    logging.basicConfig(level=level, stream=sys.stderr, format=log_format)

    if args.string is None:
        text = sys.stdin.read()
    else:
        text = args.string

    xtypeinto = XTypeInto()
    w = xtypeinto.pick_window()
    log.info("Selected window {}".format(w.id))
    xtypeinto.type(w.id, text)


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except Exception:
        log.exception("uncaught exception")
